{"version":3,"sources":["config.js","components/SignIn.jsx","components/Popup.jsx","layout.js","images/404.jpg","components/404.jsx","components/Dashboard.jsx","components/Form.jsx","components/Collection.jsx","components/Payout.jsx","App.js","index.js"],"names":["CONTRACT_NAME","process","NFT_CONTRACT_NAME","DONATION_ACCOUNT_NAME","module","exports","env","networkId","nodeUrl","contractName","nftContractName","donationAccountName","walletUrl","helperUrl","keyPath","HOME","masterAccount","Error","SignIn","signIn","small","onClick","Popup","props","className","handleClose","content","Layout","currentUser","signOut","clearMessage","message","class","id","pageWrapId","outerContainerId","to","floating","large","icon","fontSize","tooltip","accountId","NotFound","src","Image404","alt","width","style","margin","React","Component","Dashboard","version","nearConfig","useState","loaded","setLoaded","gameTreasury","setGameTreasury","gamePayout","setGamePayout","donationTreasury","setDonationTreasury","useEffect","a","getAccountBalance","gameBalance","dontationBalance","Big","div","minus","toFixed","accountName","keyStore","nearAPI","BrowserLocalStorageKeyStore","near","account","gameAccount","total","fetchData","Form","onNftMint","onSubmit","min","max","type","Collection","contract","nfts","setNfts","nft_supply_for_owner","account_id","count","nft_tokens_for_owner","from_index","limit","parseInt","result","console","log","splitArrayIntoChunksOfLen","filter","nft","metadata","extra","arr","len","chunks","i","n","length","push","slice","map","chunk","media","title","height","description","Payout","onPayout","sets","setSets","analyseSets","completeSets","analyse","template","set","forEach","ele","find","e","token_id","require","BOATLOAD_OF_GAS","times","App","nftContract","wallet","provider","lastTransaction","error","setMessage","txHash","txStatus","receipts_outcome","outcome","logs","pop","decodeURI","window","history","pushState","location","origin","hash","getState","requestSignIn","contractId","methodNames","buy_animal","name","payout","path","element","replace","pathname","index","preventDefault","fieldset","target","elements","amount","item","disabled","value","then","_","nft_set","getConfig","NEAR_ENV","walletConnection","getAccountId","state","balance","viewMethods","changeMethods","sender","connection","nearInitPromise","initContract","errorMessage","urlParams","URLSearchParams","search","has","get","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a3f8eecb.chunk.js","sourcesContent":["const CONTRACT_NAME = process.env.CONTRACT_NAME || 'kawaii-zoo-game.cryptosketches.testnet';\nconst NFT_CONTRACT_NAME = process.env.NFT_CONTRACT_NAME || 'kawaii-zoo-nft.cryptosketches.testnet';\nconst DONATION_ACCOUNT_NAME = process.env.DONATION_ACCOUNT_NAME || 'kawaii-zoo-donation.cryptosketches.testnet';\n\nfunction getConfig(env) {\n  switch(env) {\n    case 'production':\n    case 'mainnet':\n      return {\n        networkId: 'mainnet',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        contractName: CONTRACT_NAME,\n        nftContractName: NFT_CONTRACT_NAME,\n        donationAccountName: DONATION_ACCOUNT_NAME,\n        walletUrl: 'https://wallet.near.org',\n        helperUrl: 'https://helper.mainnet.near.org'\n      };\n    case 'development':\n    case 'testnet':\n      return {\n        networkId: 'testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        contractName: CONTRACT_NAME,\n        nftContractName: NFT_CONTRACT_NAME,\n        donationAccountName: DONATION_ACCOUNT_NAME,\n        walletUrl: 'https://wallet.testnet.near.org',\n        helperUrl: 'https://helper.testnet.near.org'\n      };\n    case 'betanet':\n      return {\n        networkId: 'betanet',\n        nodeUrl: 'https://rpc.betanet.near.org',\n        contractName: CONTRACT_NAME,\n        nftContractName: NFT_CONTRACT_NAME,\n        donationAccountName: DONATION_ACCOUNT_NAME,\n        walletUrl: 'https://wallet.betanet.near.org',\n        helperUrl: 'https://helper.betanet.near.org'\n      };\n    case 'local':\n      return {\n        networkId: 'local',\n        nodeUrl: 'http://localhost:3030',\n        keyPath: `${process.env.HOME}/.near/validator_key.json`,\n        walletUrl: 'http://localhost:4000/wallet',\n        contractName: CONTRACT_NAME,\n        nftContractName: NFT_CONTRACT_NAME,\n        donationAccountName: DONATION_ACCOUNT_NAME\n      };\n    case 'test':\n    case 'ci':\n      return {\n        networkId: 'shared-test',\n        nodeUrl: 'https://rpc.ci-testnet.near.org',\n        contractName: CONTRACT_NAME,\n        nftContractName: NFT_CONTRACT_NAME,\n        donationAccountName: DONATION_ACCOUNT_NAME,\n        masterAccount: 'test.near'\n      };\n    case 'ci-betanet':\n      return {\n        networkId: 'shared-test-staging',\n        nodeUrl: 'https://rpc.ci-betanet.near.org',\n        contractName: CONTRACT_NAME,\n        nftContractName: NFT_CONTRACT_NAME,\n        donationAccountName: DONATION_ACCOUNT_NAME,\n        masterAccount: 'test.near'\n      };\n    default:\n      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);\n  }\n}\n\nmodule.exports = getConfig;\n","import React from 'react';\nimport { Button } from 'react-materialize';\n\nexport default function SignIn({signIn}) {\n  return (\n    <>\n      <header>\n                   <h1>Kawaii Zoo Homepage</h1>\n      </header>\n      <Button small onClick={signIn}>Log in</Button>\n      <p>\n          This app was developed for the NEAR Spring hackathon. \n          In order to use the app you need to sign in with your NEAR wallet.\n      </p>\n    </>\n  );\n}\n","import React from \"react\";\r\n\r\nconst Popup = props => {\r\n  return (\r\n    <div className=\"popup-box\">\r\n      <div className=\"box\">\r\n        <span className=\"close-icon\" onClick={props.handleClose}>x</span>\r\n        {props.content}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Popup;","import React from 'react';\r\nimport { Link, Outlet } from 'react-router-dom'\r\nimport { slide as Menu } from 'react-burger-menu';\r\nimport { Button } from 'react-materialize';\r\nimport PropTypes from 'prop-types';\r\nimport AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';\r\nimport BrokenImageIcon from '@mui/icons-material/BrokenImage';\r\nimport Popup from './components/Popup';\r\n\r\nconst Layout = ({currentUser, signIn, signOut, clearMessage, message}) => {\r\n  return (\r\n    <>\r\n      <div class=\"image\"></div>\r\n      <div id=\"App\">\r\n          <Menu pageWrapId={ \"page-wrapper\" } outerContainerId={ \"App\" }>\r\n            <Link className=\"menu-item\" to=\"/\">\r\n              Dashboard\r\n            </Link>\r\n\r\n            <Link className=\"menu-item\" to=\"/collection\">\r\n              Collection\r\n            </Link>\r\n\r\n            <Link className=\"menu-item\" to=\"/payout\">\r\n              Payout\r\n            </Link>\r\n          </Menu>\r\n          <main id=\"page-wrapper\">\r\n            <Outlet/>\r\n          </main>\r\n          { currentUser\r\n            ? <Button onClick={signOut} floating large className='btn-login' icon={<AccountBalanceWalletIcon fontSize=\"medium\" />} tooltip={'Log out ' + currentUser.accountId + '.'} />\r\n            : <Button onClick={signIn} floating large className='btn-login' icon={<BrokenImageIcon fontSize=\"medium\" />} tooltip='Log in using NEAR wallet.' />\r\n          }        \r\n          {message && <Popup\r\n            content={<>\r\n              <b>A message for you</b>\r\n              <p>{message}</p>\r\n            </>}\r\n            handleClose={clearMessage}\r\n          />}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nLayout.propTypes = {\r\n  currentUser: PropTypes.shape({\r\n    accountId: PropTypes.string.isRequired,\r\n    balance: PropTypes.string.isRequired\r\n  }),\r\n  signIn: PropTypes.func.isRequired,\r\n  signOut: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Layout;","export default __webpack_public_path__ + \"static/media/404.6fa35088.jpg\";","import React from 'react'\r\nimport Image404 from '../images/404.jpg';\r\n\r\nclass NotFound extends React.Component {\r\n   render() {\r\n      return <img src={Image404} alt=\"Nothing is here.\" \r\n                  width='900'\r\n                  style={{margin:'10em'}}/>;\r\n   }\r\n}\r\nexport default NotFound;","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport * as nearAPI from 'near-api-js';\r\nimport Big from 'big.js';\r\nimport CardGiftcardIcon from '@mui/icons-material/CardGiftcard';\r\nimport AccountBalanceIcon from '@mui/icons-material/AccountBalance';\r\nimport VolunteerActivismIcon from '@mui/icons-material/VolunteerActivism';\r\n\r\nconst Dashboard = ({version, nearConfig}) => {\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [gameTreasury, setGameTreasury] = useState('');\r\n  const [gamePayout, setGamePayout] = useState('');\r\n  const [donationTreasury, setDonationTreasury] = useState('');\r\n\r\n  useEffect(() => {\r\n      async function fetchData() {\r\n        const gameBalance = await getAccountBalance(nearConfig.contractName);\r\n        const dontationBalance = await getAccountBalance(nearConfig.donationAccountName);\r\n        \r\n        setDonationTreasury(Big(dontationBalance).div(10 ** 24).minus(100).toFixed(2));\r\n        setGameTreasury(Big(gameBalance).div(10 ** 24).minus(100).toFixed(2));\r\n        setGamePayout(Big(gameBalance).div(10 ** 24).minus(100).div(2).toFixed(2));\r\n        setLoaded(true);\r\n      }\r\n\r\n      async function getAccountBalance(accountName) {\r\n        const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();\r\n        const near = await nearAPI.connect({ keyStore, ...nearConfig });\r\n        const gameAccount = await near.account(accountName);\r\n        const gameBalance = await gameAccount.getAccountBalance();\r\n        return gameBalance.total;\r\n      }\r\n      \r\n      fetchData();\r\n  }, [nearConfig]);\r\n\r\n   return <>\r\n                 <header>\r\n                   <h1>NEAR Challenge #6 - Kawaii Zoo NFTs - {version}</h1>\r\n                 </header>\r\n                 {loaded\r\n                 //?<h5>Game Treasury: {gameTreasury} Ⓝ - Next Payout: {gamePayout} Ⓝ - Donated Amount: {donationTreasury} Ⓝ</h5>\r\n                 ? <div className='row'>\r\n                    <div className='col s4'>\r\n                      <div className='card card-stats'>\r\n                        <div className='card-body'>\r\n                          <div className='row'>\r\n                            <div className='col s5 text-center'>\r\n                              <AccountBalanceIcon className='icon-big'/>\r\n                              <p className='small'>Game Treasury</p>\r\n                            </div>\r\n                            <div className='col s7 numbers'>\r\n                              <h5>{gameTreasury} Ⓝ</h5>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className='col s4'>\r\n                      <div className='card card-stats'>\r\n                        <div className='card-body'>\r\n                          <div className='row'>\r\n                            <div className='col s5 text-center'>\r\n                              <CardGiftcardIcon className='icon-big'/>\r\n                              <p className='small'>Next Payout</p>\r\n                            </div>\r\n                            <div className='col s7 numbers'>\r\n                              <h5>{gamePayout} Ⓝ</h5>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className='col s4'>\r\n                      <div className='card card-stats'>\r\n                        <div className='card-body'>\r\n                          <div className='row'>\r\n                            <div className='col s5 text-center'>\r\n                              <VolunteerActivismIcon className='icon-big'/>\r\n                              <p className='small'>Donated Amount</p>\r\n                            </div>\r\n                            <div className='col s7 numbers'>\r\n                              <h5>{donationTreasury} Ⓝ</h5>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                 :null}\r\n                  <p>\r\n                      This app was developed for the NEAR Spring hackathon. It demonstrate how donations for Ukrainian Zoos can be \r\n                      collected using a simple NFT-based set collection game.\r\n                  </p>\r\n                  <p>\r\n                      Here is how the app works. Everyone can mint animal NFTs. These animals come in 5 colors and 5 different animals.\r\n                      Each animal costs exactly 1 NEAR. 0.2 NEAR are directly donated to a donation account. The remaining 0.8 NEAR go\r\n                      to the apps treasury.\r\n                  </p>\r\n                  <p>\r\n                      This app is a set collection game. You need to either collect 5 differnt animals in the same color or one animal\r\n                      in 5 differnt colors. Once you have a completed set you can cash out from the games treasury. In this demonstration\r\n                      you simply get 50% of the treasury. When a set is cashed out, the NFTs are invalided. They are still owned by the\r\n                      user, but unusable for a cash out.\r\n                  </p>\r\n                  <p>\r\n                      They idea behind that was, that in order get donations you need to create incentives. The incentive here is basically\r\n                      a game of luck. In average a user needs to mint more than 5 animals to get a complete set. But a lucky user will get\r\n                      a complete set with minting only 5 animals. This user might then cash out more then he put into the game.\r\n                  </p>\r\n                  <p>\r\n                      Of course in a real world scenario the dynamic of the rewards need to be adjusted to make the game fair and fun.\r\n                      Additonally there are possiblities for more income streams to the tresury/donation account in form of external NFT \r\n                      market place fees/royalty or additional NFTs like color changing food.\r\n                  </p>\r\n                 <h5>Head over to <Link className=\"menu-item\" to=\"/collection\">your collection</Link> to mint \r\n                     you first animal or go to <Link className=\"menu-item\" to=\"/payout\">payout</Link> to\r\n                     see your complete sets and cash them out.\r\n                 </h5>\r\n             </>\r\n}\r\n\r\nDashboard.propTypes = {\r\n  version: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Dashboard;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Range, Button } from 'react-materialize';\n\nexport default function Form({ onNftMint }) {\n  return (\n    <form onSubmit={onNftMint}>\n      <fieldset id=\"fieldset\">\n        <div className=\"highlight\">\n          <p>Select the amount of animals you want to mint. Each animal costs 1 Ⓝ.</p>\n          <Range id=\"amount\" min=\"1\" max=\"7\"/>\n        </div>\n        <Button type=\"submit\" small\n                tooltip=\"Mint the chosen amount of animals.\">\n          Mint!\n        </Button>\n      </fieldset>\n    </form>\n  );\n}\n\nForm.propTypes = {\n  onNftMint: PropTypes.func.isRequired,\n  errorMessage: PropTypes.string.isRequired,\n};","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Form from './Form';\r\nimport { Spinner } from 'react-materialize';\r\n\r\nconst Collection = ({currentUser, onNftMint, contract}) => {\r\n    const [nfts, setNfts] = useState([]);\r\n    const [loaded, setLoaded] = useState(false);\r\n  \r\n  useEffect(() => {\r\n      async function fetchData() {\r\n        const count = await contract.nft_supply_for_owner({account_id: currentUser.accountId});\r\n        const result = await contract.nft_tokens_for_owner(\r\n        {\r\n            account_id: currentUser.accountId,\r\n            from_index: \"0\",\r\n            limit: parseInt(count)\r\n        });\r\n        console.log(result);\r\n        setNfts(splitArrayIntoChunksOfLen(result.filter(nft => nft.metadata.extra !== \"used\"), 3));\r\n        setLoaded(true);\r\n      }\r\n      \r\n      fetchData();\r\n  }, [contract, currentUser]);\r\n  \r\n  const splitArrayIntoChunksOfLen = (arr, len) => {\r\n    var chunks = [], i = 0, n = arr.length;\r\n    while (i < n) {\r\n      chunks.push(arr.slice(i, i += len));\r\n    }\r\n    return chunks;\r\n  }\r\n\r\n  if(!loaded){\r\n    return <>\r\n              <header>\r\n                <h1>Available sets.</h1>\r\n              </header>\r\n              <h1>Loading...</h1>\r\n              <Spinner />\r\n          </>\r\n  }\r\n  \r\n   return <>\r\n                 <header>\r\n                   <h1>{currentUser.accountId}'s Collection</h1>\r\n                 </header>\r\n                 \r\n                  {nfts.length > 0\r\n                  ? nfts.map(chunk => \r\n                    <div className=\"row\">\r\n                      {chunk.map(nft =>\r\n                        <div className=\"col s4\">\r\n                            <div className=\"card\">\r\n                              <div className=\"card-image\">\r\n                                <img src={nft.metadata.media} alt={nft.metadata.title} height=\"200\" className='nft-image'/>\r\n                              </div>\r\n                              <div className=\"card-title\">{nft.metadata.title}</div>\r\n                              <div className=\"card-content\">\r\n                                <p>{nft.metadata.description}</p>\r\n                              </div>\r\n                            </div>\r\n                        </div>)}          \r\n                    </div>)\r\n                  : <p>\r\n                        You do not have any NFTs in your collection. All used NFTs are filtered out in this view.\r\n                    </p>}\r\n                 <h5>Mint a new NFT below.</h5>\r\n                 <Form onNftMint={onNftMint} />\r\n          </>\r\n}\r\n\r\nCollection.propTypes = {\r\n  onNftMint: PropTypes.func.isRequired,\r\n  currentUser: PropTypes.shape({\r\n    accountId: PropTypes.string.isRequired,\r\n    balance: PropTypes.string.isRequired\r\n  }),\r\n  contract: PropTypes.shape({\r\n    nft_supply_for_owner: PropTypes.func.isRequired,\r\n    nft_tokens_for_owner: PropTypes.func.isRequired\r\n  })\r\n};\r\n\r\nexport default Collection;","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Spinner, Carousel, Button } from 'react-materialize';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Payout = ({currentUser, contract, onPayout}) => {\r\n  const [sets, setSets] = useState([]);\r\n  const [loaded, setLoaded] = useState(false);\r\n  \r\n  useEffect(() => {\r\n      async function fetchData() {\r\n        const count = await contract.nft_supply_for_owner({account_id: currentUser.accountId});\r\n        const result = await contract.nft_tokens_for_owner(\r\n        {\r\n            account_id: currentUser.accountId,\r\n            from_index: \"0\",\r\n            limit: parseInt(count)\r\n        });\r\n        console.log(result);\r\n        analyseSets(result);\r\n        setLoaded(true);\r\n      }\r\n\r\n      function analyseSets(nfts) {\r\n        const completeSets = [];\r\n        analyse(nfts, [\"11\", \"12\", \"13\", \"14\", \"15\"], completeSets);\r\n        analyse(nfts, [\"21\", \"22\", \"23\", \"24\", \"25\"], completeSets);\r\n        analyse(nfts, [\"31\", \"32\", \"33\", \"34\", \"35\"], completeSets);\r\n        analyse(nfts, [\"41\", \"42\", \"43\", \"44\", \"45\"], completeSets);\r\n        analyse(nfts, [\"51\", \"52\", \"53\", \"54\", \"55\"], completeSets);\r\n        analyse(nfts, [\"11\", \"21\", \"31\", \"41\", \"51\"], completeSets);\r\n        analyse(nfts, [\"12\", \"22\", \"32\", \"42\", \"52\"], completeSets);\r\n        analyse(nfts, [\"13\", \"23\", \"33\", \"43\", \"53\"], completeSets);\r\n        analyse(nfts, [\"14\", \"24\", \"34\", \"44\", \"54\"], completeSets);\r\n        analyse(nfts, [\"15\", \"25\", \"35\", \"45\", \"55\"], completeSets);\r\n        setSets(completeSets);\r\n      }\r\n\r\n      function analyse(nfts, template, completeSets) {\r\n        const set = [];\r\n        template.forEach(ele => {\r\n          const nft = nfts.find(n => n.metadata.extra === ele);\r\n          if(nft){\r\n            set.push(nft);\r\n          }\r\n        });\r\n        if(set.length === template.length){\r\n          completeSets.push(set);\r\n        }\r\n      }\r\n      \r\n      fetchData();\r\n  }, [contract, currentUser]);\r\n\r\n  if(!loaded){\r\n    return <>\r\n              <header>\r\n                <h1>Available sets.</h1>\r\n              </header>\r\n              <h1>Loading...</h1>\r\n              <Spinner />\r\n          </>\r\n  }\r\n  \r\n   return <>\r\n                 <header>\r\n                   <h1>Cash Out Completed Sets</h1>\r\n                 </header>\r\n                 \r\n                  {sets.length > 0\r\n                  ? sets.map(chunk => \r\n                        <>\r\n                          <div className='row  valign-wrapper center'>\r\n                            <div className='col s1'>\r\n                              <Button small tooltip='Payout the set. This will invalidate the set, making the NFTs unusable.'\r\n                                      onClick={e => onPayout(chunk.map(nft => nft.token_id))}>\r\n                                Payout\r\n                              </Button>\r\n                            </div>\r\n                            <div className='col s11'>\r\n                              <Carousel>\r\n                                {chunk.map(nft =>\r\n                                  <img src={nft.metadata.media} alt={nft.metadata.title} height=\"200\" className='nft-image'/>)}          \r\n                              </Carousel>\r\n                            </div>\r\n                          </div>\r\n                        </>)\r\n                  : <p>\r\n                        You do not have any complete sets yet. Head over to <Link className=\"menu-item\" to=\"/collection\">your collection</Link> and \r\n                        mint some more animals. Good luck! 🍀\r\n                    </p>}\r\n          </>\r\n}\r\n\r\nPayout.propTypes = {\r\n  currentUser: PropTypes.shape({\r\n    accountId: PropTypes.string.isRequired,\r\n    balance: PropTypes.string.isRequired\r\n  }),\r\n  contract: PropTypes.shape({\r\n    nft_supply_for_owner: PropTypes.func.isRequired,\r\n    nft_tokens_for_owner: PropTypes.func.isRequired\r\n  }),\r\n  onPayout: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Payout;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport SignIn from './components/SignIn';\nimport Big from 'big.js';\nimport Layout from './layout';\nimport NotFound from './components/404.jsx';\nimport Dashboard from './components/Dashboard.jsx';\nimport Collection from './components/Collection.jsx';\nimport Payout from './components/Payout.jsx';\nimport 'materialize-css/dist/css/materialize.css'\nimport './App.css';\nimport { Route, Routes } from 'react-router-dom'\nvar version = require('../package.json').version;\nrequire('materialize-css');\n\nconst BOATLOAD_OF_GAS = Big(3).times(10 ** 14).toFixed();\n\nconst App = ({ contract, nftContract, currentUser, nearConfig, wallet, provider, lastTransaction, error }) => {\n  const [message, setMessage] = useState('');\n\n  const onNftMint = (e) => {\n    e.preventDefault();\n\n    const { fieldset } = e.target.elements;\n    const amount = e.target.elements.item(1);\n\n    fieldset.disabled = true;\n\n    contract.buy_animal(\n      {\n        count: parseInt(amount.value)\n      },\n      BOATLOAD_OF_GAS,\n      Big('1').times(10 ** 24).times(amount.value).toFixed()\n    ).then((_) => {\n      console.log(\"Successfully minted.\");\n    })\n  }\n\n  const onPayout = (set) => {\n    contract.payout(\n      {\n        nft_set: set.map(id => parseInt(id))\n      },\n      BOATLOAD_OF_GAS,\n      0\n    ).then((_) => {\n      console.log(\"Successfully payed out.\");\n    })\n  }\n  \n  useEffect(() => {\n      if (error){\n        setMessage(decodeURI(error));\n        window.history.pushState({}, \"\", window.location.origin + window.location.hash);\n      }\n      else if (lastTransaction && currentUser) {          \n        getState(lastTransaction, currentUser.accountId);\n        window.history.pushState({}, \"\", window.location.origin + window.location.hash);\n      }\n\n      async function getState(txHash, accountId) {\n        const result = await provider.txStatus(txHash, accountId);\n        //minting\n        let message = result.receipts_outcome[0].outcome.logs.pop();\n        if(!message){\n          //payout\n          message = result.receipts_outcome[6].outcome.logs.pop();\n        }\n        setMessage(message);\n      }\n  }, [lastTransaction, error, currentUser, provider]);\n  \n  const signIn = () => {\n    wallet.requestSignIn(\n      {contractId: nearConfig.contractName, methodNames: [contract.buy_animal.name, contract.payout.name]}, //contract requesting access\n      'NEAR Challenge #6 - Kawaii Zoo NFTs', //optional name\n      null, //optional URL to redirect to if the sign in was successful\n      null //optional URL to redirect to if the sign in was NOT successful\n    );\n  };\n\n  const signOut = () => {\n    wallet.signOut();\n    window.location.replace(window.location.origin + window.location.pathname);\n  };\n\n  const clearMessage = () => {\n    setMessage('');\n  };\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<Layout currentUser={currentUser} signIn={signIn} signOut={signOut} clearMessage={clearMessage} message={message}/>}>\n        <Route index element={\n          currentUser\n            ? <Dashboard version={version} nearConfig={nearConfig}/>\n            : <SignIn signIn={signIn}/>\n        }/>\n        <Route path=\"collection\" element={\n          currentUser\n            ? <Collection onNftMint={onNftMint} currentUser={currentUser} contract={nftContract}/>\n            : <SignIn signIn={signIn}/>\n        }/>\n        <Route path=\"payout\" element={\n          currentUser\n            ? <Payout onPayout={onPayout} currentUser={currentUser} contract={nftContract}/>\n            : <SignIn signIn={signIn}/>\n        }/>\n        <Route path=\"*\" element={<NotFound/>}/>\n      </Route>\n    </Routes>\n  );\n}\n\nApp.propTypes = {\n  contract: PropTypes.shape({\n    buy_animal: PropTypes.func.isRequired\n  }).isRequired,\n  currentUser: PropTypes.shape({\n    accountId: PropTypes.string.isRequired,\n    balance: PropTypes.string.isRequired\n  }),\n  nearConfig: PropTypes.shape({\n    contractName: PropTypes.string.isRequired\n  }).isRequired,\n  wallet: PropTypes.shape({\n    requestSignIn: PropTypes.func.isRequired,\n    signOut: PropTypes.func.isRequired\n  }).isRequired\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from \"react-router-dom\";\nimport App from './App';\nimport getConfig from './config.js';\nimport * as nearAPI from 'near-api-js';\n\n// Initializing contract\nasync function initContract() {\n  \n  // get network configuration values from config.js\n  // based on the network ID we pass to getConfig()\n  const nearConfig = getConfig(process.env.NEAR_ENV || 'testnet');\n\n  // create a keyStore for signing transactions using the user's key\n  // which is located in the browser local storage after user logs in\n  const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();\n\n  // Initializing connection to the NEAR testnet\n  const near = await nearAPI.connect({ keyStore, ...nearConfig });\n\n  // Initialize wallet connection\n  const walletConnection = new nearAPI.WalletConnection(near);\n\n  // Load in user's account data\n  let currentUser;\n  if (walletConnection.getAccountId()) {\n    currentUser = {\n      // Gets the accountId as a string\n      accountId: walletConnection.getAccountId(),\n      // Gets the user's token balance\n      balance: (await walletConnection.account().state()).amount,\n    };\n  }\n\n  // Initializing our contract APIs by contract name and configuration\n  const contract = await new nearAPI.Contract(\n    // User's accountId as a string\n    walletConnection.account(),\n    // accountId of the contract we will be loading\n    // NOTE: All contracts on NEAR are deployed to an account and\n    // accounts can only have one contract deployed to them.\n    nearConfig.contractName,\n    {\n      // View methods are read-only – they don't modify the state, but usually return some value\n      viewMethods: [],\n      // Change methods can modify the state, but you don't receive the returned value when called\n      changeMethods: ['buy_animal', 'payout'],\n      // Sender is the account ID to initialize transactions.\n      // getAccountId() will return empty string if user is still unauthorized\n      sender: walletConnection.getAccountId(),\n    }\n  );\n\n  // Initializing our contract APIs by contract name and configuration\n  const nftContract = await new nearAPI.Contract(\n    // User's accountId as a string\n    walletConnection.account(),\n    // accountId of the contract we will be loading\n    // NOTE: All contracts on NEAR are deployed to an account and\n    // accounts can only have one contract deployed to them.\n    nearConfig.nftContractName,\n    {\n      // View methods are read-only – they don't modify the state, but usually return some value\n      viewMethods: ['nft_supply_for_owner', 'nft_tokens_for_owner'],\n      // Change methods can modify the state, but you don't receive the returned value when called\n      changeMethods: [],\n      // Sender is the account ID to initialize transactions.\n      // getAccountId() will return empty string if user is still unauthorized\n      sender: walletConnection.getAccountId(),\n    }\n  );\n  \n  const provider = near.connection.provider;\n  \n  return { contract, nftContract, currentUser, nearConfig, walletConnection, provider };\n}\n\nwindow.nearInitPromise = initContract().then(\n  ({ contract, nftContract, currentUser, nearConfig, walletConnection, provider }) => {\n    let urlParams = new URLSearchParams(window.location.search);\n    let lastTransaction;\n    if(urlParams.has('transactionHashes')){\n        lastTransaction = urlParams.get('transactionHashes');\n    }\n    let errorMessage;\n    if(urlParams.has('errorMessage')){\n        errorMessage = urlParams.get('errorMessage');\n    }\n    ReactDOM.render(\n\t  <Router>\n        <App\n          contract={contract}\n          currentUser={currentUser}\n          nearConfig={nearConfig}\n          wallet={walletConnection}\n          lastTransaction={lastTransaction}\n          provider={provider}\n          error={errorMessage}\n          nftContract={nftContract}\n        />\n\t  </Router>,\n      document.getElementById('root')\n    );\n  }\n);\n\n"],"sourceRoot":""}